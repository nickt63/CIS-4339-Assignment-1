//Exercise Part A
use employees //1. Create 'employees' database

show dbs //2. Show all current databases

//Exercise Part B
use temporary //1. Create 'temporary' database
db.createCollection('test'); //1. Add collection 'test'
show dbs //1. Show all current databases
show collections //1. Show all the collections in 'temporary' database
db.dropDatabase() // 1. Drop 'temporary' database

use employees //Switch DB to 'employees'
db.createCollection('HR');//2. Create distinct department names for 'employees' DB
db.createCollection('Marketing');//2. Create distinct department names for 'employees' DB
db.createCollection('EXEC');//2. Create distinct department names for 'employees' DB
db.createCollection('Sales');//2. Create distinct department names for 'employees' DB
show collections //Display 'employees' collection

//Exercise Part C
//1. Add employee documents into collections created in Exercise Part B
db.HR.insert(
    {
        employeeid: 1,
        name: "Peter Parket",
        salary: 65000
    })
db.Marketing.insert(
    {
        employeeid: 2,
        name: "Hunter Hitchcock",
        salary: 45000
    })
db.EXEC.insert(
    {
        employeeid: 3,
        name: "Matt Furlong",
        salary: 150000
    })
db.Sales.insert(
    {
        employeeid: 4,
        name: "Randy Savage",
        salary: 100000
    })

db.HR.find() //2. Find document(s) of HR collection
db.Marketing.find() //2. Find document(s) of Marketing collection
db.EXEC.find() //2. Find document(s) of EXEC collection
db.Sales.find() //2. Find document(s) of Sales collection

//Exercise Part D
//1. Add employees to HR collection
db.HR.insert({
    employeeid: 1187,
    name: "John Steight",
    salary: 75000
})
db.HR.insert({
    employeeid: 2455,
    name: "Syed",
    salary: 90000
})
db.HR.insert({
    employeeid: 24113,
    name: "Wright John",
    salary: 65000
})

db.HR.find()

//2. Find 2 documents using the field name: employeeid
db.HR.find({
    employeeid: 1187
})

db.EXEC.find({
    employeeid: 3
})

//3. Find 2 documents using the field name: name
db.HR.find({
    name: "Syed"
})
db.HR.find({
    name: "Wright John"
})

//4. Find all documents where the name field starts with John
db.HR.find({
    name: /^John/
})

//5. Find all documents where the name field contains John
db.HR.find({
    name: /John/
})

//Exercise Part E
//mongoimport --db employees --collection zips --file zips.json

//1. Find all cities with a population of less than 1500
db.zips.find({
    pop: {
        $lt: 1500
    }
})

//2. Find all data for the city CHESTER using query operator
db.zips.find({
    city: "CHESTER"
})

//3. Use array query operator to find entries for the location at -84.38570799999999, 45.015207
db.zips.find({
    "loc": {$all : [-84.38570799999999, 45.015207]}

})

//4. Use a logical operator to find all entries that match the city WARREN or location -80.76424299999999, 41.231819
db.zips.find({

    $or: [{city:"WARREN"},{ "loc": {$all : [-80.76424299999999, 41.231819]}}]

})

//Exercise Part F

//1. Use the $where operator to find all employees who have a salary > 75000
db.HR.find( { $where: function() { return (this.salary > 75000) }})

//2. Use the $where operator to find employees where the name contains John
db.HR.find( { $where: function() { return (this.name == /John/) }})

//Exercise Part G
//1. Using only one collection from the employees database query all the documents in that collection but return only name and salary.
db.HR.find({},{
    _id: false,
    name: true,
    salary: true
})
